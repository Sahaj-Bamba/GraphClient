{"version":3,"sources":["Components/Graph/Graph.jsx","Components/Home/Main.jsx","Routes.jsx","App.js","reportWebVitals.js","index.js"],"names":["GraphConfig","NodeTypes","empty","typeText","shapeId","shape","viewBox","id","cx","cy","r","NodeSubtypes","EdgeTypes","emptyEdge","fill","sample","nodes","title","x","y","type","subtype","edges","source","target","handleText","Graph","props","handleSubmit","event","state","input","field","data","graph","newSample","map","value","index","setState","formVisible","graphConfig","Object","keys","includes","preventDefault","handleTitleChange","name","onSelectNode","node","selected","onCreateNode","Date","now","onDeleteNode","filter","onBackgroundClick","onSelectEdge","edge","onCreateEdge","dest","onDeleteEdge","createNodeType","nodeTypeChange","this","style","display","onSubmit","onChange","InputLabel","htmlFor","Select","native","label","inputProps","ref","nodeKey","nodeTypes","nodeSubtypes","edgeTypes","onUpdateNode","onSwapEdge","Component","Main","changeMenu","item","activeMenu","stopPropagation","className","Routes","path","exact","render","Fragment","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.499e5357.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Graph.scss\";\r\nimport {\r\n\tGraphView, // required\r\n\tEdge, // optional\r\n\ttype IEdge, // optional\r\n\tNode, // optional\r\n\ttype INode, // optional\r\n\ttype LayoutEngineType, // required to change the layoutEngineType, otherwise optional\r\n\tBwdlTransformer, // optional, Example JSON transformer\r\n\tGraphUtils, // optional, useful utility functions\r\n} from \"react-digraph\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\n\r\nimport { generatePath } from \"react-router-dom\";\r\n\r\nconst GraphConfig = {\r\n\tNodeTypes: {\r\n\t\tempty: {\r\n\t\t\ttypeText: \"Node\",\r\n\t\t\tshapeId: \"#empty\", // relates to the type property of a node\r\n\t\t\tshape: (\r\n\t\t\t\t<symbol viewBox=\"0 0 100 100\" id=\"empty\" key=\"0\">\r\n\t\t\t\t\t<circle cx=\"50\" cy=\"50\" r=\"50\"></circle>\r\n\t\t\t\t</symbol>\r\n\t\t\t),\r\n\t\t},\r\n\t},\r\n\tNodeSubtypes: {},\r\n\tEdgeTypes: {\r\n\t\temptyEdge: {\r\n\t\t\tshapeId: \"#emptyEdge\",\r\n\t\t\tshape: (\r\n\t\t\t\t<symbol viewBox=\"0 0 50 50\" id=\"emptyEdge\" key=\"0\">\r\n\t\t\t\t\t<circle cx=\"25\" cy=\"25\" r=\"20\" fill=\"currentColor\"></circle>\r\n\t\t\t\t</symbol>\r\n\t\t\t),\r\n\t\t},\r\n\t},\r\n};\r\n\r\nconst sample = {\r\n\tnodes: [\r\n\t\t{\r\n\t\t\tid: 1,\r\n\t\t\ttitle: \"Node A\",\r\n\t\t\tx: 258.3976135253906,\r\n\t\t\ty: 331.9783248901367,\r\n\t\t\ttype: \"empty\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 2,\r\n\t\t\ttitle: \"Node B\",\r\n\t\t\tx: 593.9393920898438,\r\n\t\t\ty: 260.6060791015625,\r\n\t\t\ttype: \"empty\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 3,\r\n\t\t\ttitle: \"Node C\",\r\n\t\t\tx: 237.5757598876953,\r\n\t\t\ty: 61.81818389892578,\r\n\t\t\ttype: \"empty\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 4,\r\n\t\t\ttitle: \"Node C\",\r\n\t\t\tx: 600.5757598876953,\r\n\t\t\ty: 600.81818389892578,\r\n\t\t\ttype: \"empty\",\r\n\t\t\tsubtype: \"empty\",\r\n\t\t},\r\n\t],\r\n\tedges: [\r\n\t\t{\r\n\t\t\tsource: 1,\r\n\t\t\ttarget: 2,\r\n\t\t\ttype: \"emptyEdge\",\r\n\t\t\thandleText: \"\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tsource: 2,\r\n\t\t\ttarget: 4,\r\n\t\t\ttype: \"emptyEdge\",\r\n\t\t},\r\n\t],\r\n};\r\n\r\nconst NODE_KEY = \"id\"; // Allows D3 to correctly update DOM\r\n\r\nclass Graph extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tgraph: sample,\r\n\t\t\tgraphConfig: GraphConfig,\r\n\t\t\tselected: {},\r\n\t\t\tinput: {\r\n\t\t\t\ttitle: \"\",\r\n\t\t\t\tfield: \"\",\r\n\t\t\t\tdata: {},\r\n\t\t\t\ttype: \"\",\r\n\t\t\t},\r\n\t\t\tformVisible: false,\r\n\t\t};\r\n\t}\r\n\r\n\thandleSubmit = (event) => {\r\n\t\tconst { title, field, data, type } = this.state.input;\r\n\t\tconst { graph } = this.state;\r\n\t\tif (field === \"node\") {\r\n\t\t\tdata.title = title;\r\n\t\t\tdata.type = type;\r\n\t\t\tvar newSample = graph.nodes.map((value, index) => {\r\n\t\t\t\tif (value.id === data.id) {\r\n\t\t\t\t\treturn data;\r\n\t\t\t\t}\r\n\t\t\t\treturn value;\r\n\t\t\t});\r\n\t\t\tthis.setState({\r\n\t\t\t\tgraph: {\r\n\t\t\t\t\t...this.state.graph,\r\n\t\t\t\t\tnodes: newSample,\r\n\t\t\t\t},\r\n\t\t\t\tformVisible: false,\r\n\t\t\t\tinput: {\r\n\t\t\t\t\ttitle: \"\",\r\n\t\t\t\t\tfield: \"\",\r\n\t\t\t\t\tdata: {},\r\n\t\t\t\t\ttype: \"\",\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t} else if (field === \"edge\") {\r\n\t\t\tdata.handleText = title;\r\n\t\t\tvar newSample = graph.edges.map((value, index) => {\r\n\t\t\t\tif (\r\n\t\t\t\t\tvalue.source === data.source &&\r\n\t\t\t\t\tvalue.target === data.target\r\n\t\t\t\t) {\r\n\t\t\t\t\treturn data;\r\n\t\t\t\t}\r\n\t\t\t\treturn value;\r\n\t\t\t});\r\n\t\t\tthis.setState({\r\n\t\t\t\tgraph: {\r\n\t\t\t\t\t...this.state.graph,\r\n\t\t\t\t\tedges: newSample,\r\n\t\t\t\t},\r\n\t\t\t\tformVisible: false,\r\n\t\t\t\tinput: {\r\n\t\t\t\t\ttitle: \"\",\r\n\t\t\t\t\tfield: \"\",\r\n\t\t\t\t\tdata: {},\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t} else if (field === \"nodeType\") {\r\n\t\t\tconst { graphConfig } = this.state;\r\n\t\t\tif (\r\n\t\t\t\tgraphConfig.NodeTypes &&\r\n\t\t\t\tObject.keys(graphConfig.NodeTypes).includes(title)\r\n\t\t\t) {\r\n\t\t\t} else {\r\n\t\t\t\tgraphConfig.NodeTypes[title] = {\r\n\t\t\t\t\ttypeText: title,\r\n\t\t\t\t\tshapeId: \"#\" + title,\r\n\t\t\t\t\tshape: (\r\n\t\t\t\t\t\t<symbol viewBox=\"0 0 100 100\" id={title} key={0}>\r\n\t\t\t\t\t\t\t<circle cx=\"50\" cy=\"50\" r=\"100\"></circle>\r\n\t\t\t\t\t\t</symbol>\r\n\t\t\t\t\t),\r\n\t\t\t\t};\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tgraphConfig: graphConfig,\r\n\t\t\t\t\tformVisible: false,\r\n\t\t\t\t\tinput: {\r\n\t\t\t\t\t\ttitle: \"\",\r\n\t\t\t\t\t\tfield: \"\",\r\n\t\t\t\t\t\tdata: {},\r\n\t\t\t\t\t},\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\tevent.preventDefault();\r\n\t};\r\n\r\n\thandleTitleChange = (event) => {\r\n\t\tvar name = event.target.name;\r\n\t\tthis.setState({\r\n\t\t\tinput: {\r\n\t\t\t\t...this.state.input,\r\n\t\t\t\ttitle: event.target.value,\r\n\t\t\t},\r\n\t\t});\r\n\t\tevent.preventDefault();\r\n\t};\r\n\r\n\tonSelectNode = (node) => {\r\n\t\tif (!node) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tformVisible: true,\r\n\t\t\tinput: {\r\n\t\t\t\ttitle: node && node.title,\r\n\t\t\t\tfield: \"node\",\r\n\t\t\t\tdata: node,\r\n\t\t\t\ttype: node.type,\r\n\t\t\t},\r\n\t\t\tselected: node,\r\n\t\t});\r\n\t};\r\n\r\n\tonCreateNode = (x, y, event) => {\r\n\t\tconst { graph } = this.state;\r\n\t\tdebugger;\r\n\t\tvar node = {\r\n\t\t\tid: Date.now(),\r\n\t\t\ttitle: \"Sample\",\r\n\t\t\tx: x,\r\n\t\t\ty: y,\r\n\t\t\ttype: \"empty\",\r\n\t\t};\r\n\r\n\t\tthis.setState({\r\n\t\t\tgraph: {\r\n\t\t\t\t...graph,\r\n\t\t\t\tnodes: [...graph.nodes, node],\r\n\t\t\t},\r\n\t\t});\r\n\t};\r\n\r\n\tonDeleteNode = (node) => {\r\n\t\tconst { graph } = this.state;\r\n\t\tthis.setState({\r\n\t\t\tgraph: {\r\n\t\t\t\t...graph,\r\n\t\t\t\tnodes: [...graph.nodes.filter((value) => value.id !== node.id)],\r\n\t\t\t},\r\n\t\t});\r\n\t};\r\n\r\n\tonBackgroundClick = (x, y, event) => {\r\n\t\tthis.setState({\r\n\t\t\tformVisible: false,\r\n\t\t\tinput: {\r\n\t\t\t\ttitle: \"\",\r\n\t\t\t\tfield: \"\",\r\n\t\t\t\tdata: {},\r\n\t\t\t},\r\n\t\t\tselected: {},\r\n\t\t});\r\n\t};\r\n\r\n\tonSelectEdge = (edge) => {\r\n\t\tif (!edge) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tformVisible: true,\r\n\t\t\tinput: {\r\n\t\t\t\ttitle: edge && edge.handleText && edge.handleText,\r\n\t\t\t\tfield: \"edge\",\r\n\t\t\t\tdata: edge,\r\n\t\t\t},\r\n\t\t\tselected: edge,\r\n\t\t});\r\n\t};\r\n\r\n\tonCreateEdge = (source, dest) => {\r\n\t\tconst { graph } = this.state;\r\n\t\tdebugger;\r\n\t\tvar edge = {\r\n\t\t\tsource: source.id,\r\n\t\t\ttarget: dest.id,\r\n\t\t\ttype: \"emptyEdge\",\r\n\t\t\thandleText: \"\",\r\n\t\t};\r\n\r\n\t\tthis.setState({\r\n\t\t\tgraph: {\r\n\t\t\t\t...graph,\r\n\t\t\t\tedges: [...graph.edges, edge],\r\n\t\t\t},\r\n\t\t});\r\n\t};\r\n\r\n\tonDeleteEdge = (edge) => {\r\n\t\tdebugger;\r\n\t\tconst { graph } = this.state;\r\n\t\tthis.setState({\r\n\t\t\tgraph: {\r\n\t\t\t\t...graph,\r\n\t\t\t\tedges: [\r\n\t\t\t\t\t...graph.edges.filter(\r\n\t\t\t\t\t\t(value) =>\r\n\t\t\t\t\t\t\tvalue.source !== edge.source &&\r\n\t\t\t\t\t\t\tvalue.target !== edge.target\r\n\t\t\t\t\t),\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t});\r\n\t};\r\n\r\n\tcreateNodeType = () => {\r\n\t\tthis.setState({\r\n\t\t\tformVisible: true,\r\n\t\t\tinput: {\r\n\t\t\t\ttitle: \"\",\r\n\t\t\t\tfield: \"nodeType\",\r\n\t\t\t\tdata: {},\r\n\t\t\t},\r\n\t\t\tselected: {},\r\n\t\t});\r\n\t};\r\n\r\n\tnodeTypeChange = (event) => {\r\n\t\tthis.setState({\r\n\t\t\tinput: {\r\n\t\t\t\t...this.state.input,\r\n\t\t\t\ttype: event.target.value,\r\n\t\t\t},\r\n\t\t});\r\n\t\tevent.preventDefault();\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { nodes, edges } = this.state.graph;\r\n\t\tconst { selected, formVisible } = this.state;\r\n\t\tconst { title, field, type } = this.state.input;\r\n\t\tconst { NodeTypes, NodeSubtypes, EdgeTypes } = this.state.graphConfig;\r\n\r\n\t\tconst display = {\r\n\t\t\tdisplay: \"block\",\r\n\t\t};\r\n\r\n\t\tconst noDisplay = {\r\n\t\t\tdisplay: \"none\",\r\n\t\t};\r\n\r\n\t\treturn (\r\n\t\t\t<div id=\"graph\">\r\n\t\t\t\t{/* <Button\r\n\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\tonClick={this.createNodeType}\r\n\t\t\t\t>\r\n\t\t\t\t\tCreate Node Type\r\n\t\t\t\t</Button>\r\n\t\t\t\t<br /> */}\r\n\t\t\t\t<div id=\"dataForm\" style={formVisible ? display : noDisplay}>\r\n\t\t\t\t\t<form onSubmit={this.handleSubmit}>\r\n\t\t\t\t\t\t<label>\r\n\t\t\t\t\t\t\ttitle:\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\tvalue={title}\r\n\t\t\t\t\t\t\t\tname=\"title\"\r\n\t\t\t\t\t\t\t\tonChange={this.handleTitleChange}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t{field === \"node\" && (\r\n\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t<InputLabel htmlFor=\"outlined-age-native-simple\">\r\n\t\t\t\t\t\t\t\t\tNode Type\r\n\t\t\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\t\tnative\r\n\t\t\t\t\t\t\t\t\tvalue={type}\r\n\t\t\t\t\t\t\t\t\tonChange={this.nodeTypeChange}\r\n\t\t\t\t\t\t\t\t\tlabel=\"Node Type\"\r\n\t\t\t\t\t\t\t\t\tinputProps={{\r\n\t\t\t\t\t\t\t\t\t\tname: \"nodeType\",\r\n\t\t\t\t\t\t\t\t\t\tid: \"outlined-age-native-simple\",\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{Object.keys(NodeTypes).map((value) => {\r\n\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t<option value={value}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{value}\r\n\t\t\t\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" value=\"Submit\" />\r\n\t\t\t\t\t</form>\r\n\t\t\t\t</div>\r\n\t\t\t\t<GraphView\r\n\t\t\t\t\tref=\"GraphView\"\r\n\t\t\t\t\tnodeKey={NODE_KEY}\r\n\t\t\t\t\tnodes={nodes}\r\n\t\t\t\t\tedges={edges}\r\n\t\t\t\t\tselected={selected}\r\n\t\t\t\t\tnodeTypes={NodeTypes}\r\n\t\t\t\t\tnodeSubtypes={NodeSubtypes}\r\n\t\t\t\t\tedgeTypes={EdgeTypes}\r\n\t\t\t\t\tonSelectNode={this.onSelectNode}\r\n\t\t\t\t\tonCreateNode={this.onCreateNode}\r\n\t\t\t\t\tonUpdateNode={this.onUpdateNode}\r\n\t\t\t\t\tonBackgroundClick={this.onBackgroundClick}\r\n\t\t\t\t\tonDeleteNode={this.onDeleteNode}\r\n\t\t\t\t\tonSelectEdge={this.onSelectEdge}\r\n\t\t\t\t\tonCreateEdge={this.onCreateEdge}\r\n\t\t\t\t\tonSwapEdge={this.onSwapEdge}\r\n\t\t\t\t\tonDeleteEdge={this.onDeleteEdge}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Graph;\r\n","import React, { Component } from \"react\";\r\nimport \"./Main.scss\";\r\nimport Graph from \"../Graph/Graph\";\r\n\r\nclass Main extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = { activeMenu: \"Home\" };\r\n\t}\r\n\r\n\tchangeMenu = (event, item) => {\r\n\t\tthis.setState({\r\n\t\t\tactiveMenu: item,\r\n\t\t});\r\n\t\tevent.stopPropagation();\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"Main\">\r\n\t\t\t\t<div>I am Main</div>\r\n\t\t\t\t<Graph />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport Main from \"./Components/Home/Main\";\r\n\r\nclass Routes extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {};\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Router>\r\n\t\t\t\t<Route\r\n\t\t\t\t\tpath=\"/\"\r\n\t\t\t\t\texact\r\n\t\t\t\t\trender={(props) => (\r\n\t\t\t\t\t\t<React.Fragment>\r\n\t\t\t\t\t\t\t<Main />\r\n\t\t\t\t\t\t</React.Fragment>\r\n\t\t\t\t\t)}\r\n\t\t\t\t/>\r\n\t\t\t</Router>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Routes;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Routes from \"./Routes\";\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Routes />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}